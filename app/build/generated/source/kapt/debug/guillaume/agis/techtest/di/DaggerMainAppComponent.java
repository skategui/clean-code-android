// Generated by Dagger (https://google.github.io/dagger).
package guillaume.agis.techtest.di;

import android.app.Activity;
import android.content.Context;
import dagger.android.AndroidInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.internal.DoubleCheck;
import dagger.internal.MapBuilder;
import dagger.internal.Preconditions;
import guillaume.agis.techtest.MainApplication;
import guillaume.agis.techtest.MainApplication_MembersInjector;
import guillaume.agis.techtest.api.PostResource;
import guillaume.agis.techtest.api.UserResource;
import guillaume.agis.techtest.datastore.UsersDatastoreImpl;
import guillaume.agis.techtest.repo.PostsRepositoryImpl;
import guillaume.agis.techtest.repo.UsersRepositoryImpl;
import guillaume.agis.techtest.ui.customview.CommentsListView;
import guillaume.agis.techtest.ui.customview.CommentsListView_MembersInjector;
import guillaume.agis.techtest.ui.detail.CommentsAdapterImpl;
import guillaume.agis.techtest.ui.detail.PostDetailActivity;
import guillaume.agis.techtest.ui.detail.PostDetailActivity_MembersInjector;
import guillaume.agis.techtest.ui.detail.PostDetailViewModel;
import guillaume.agis.techtest.ui.list.ListPostsActivity;
import guillaume.agis.techtest.ui.list.ListPostsActivity_MembersInjector;
import guillaume.agis.techtest.ui.list.ListPostsAdapter;
import guillaume.agis.techtest.ui.list.ListPostsViewModel;
import guillaume.agis.techtest.ui.list.PostsListModule;
import guillaume.agis.techtest.ui.list.PostsListModule_ProvidesListPostsAdapterImplFactory;
import guillaume.agis.techtest.usecase.PostsUseCaseImpl;
import guillaume.agis.techtest.usecase.UsersUseCaseImpl;
import java.util.Collections;
import java.util.Map;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;

public final class DaggerMainAppComponent implements MainAppComponent {
  private DiffCallbackModule diffCallbackModule;

  private NetworkModule networkModule;

  private Provider<
          ActivityModule_ContributeListsPostsActivityInjector.ListPostsActivitySubcomponent.Builder>
      listPostsActivitySubcomponentBuilderProvider;

  private Provider<
          ActivityModule_ContributePostDetailActivityInjector.PostDetailActivitySubcomponent
              .Builder>
      postDetailActivitySubcomponentBuilderProvider;

  private NetworkModule_ProvideNetworkCacheInterceptorFactory
      provideNetworkCacheInterceptorProvider;

  private NetworkModule_ProvideHttpLoggingInterceptorFactory provideHttpLoggingInterceptorProvider;

  private Provider<OkHttpClient> createOkHttpClientProvider;

  private Provider<Retrofit> createRetrofitProvider;

  private DaggerMainAppComponent(Builder builder) {
    initialize(builder);
  }

  public static MainAppComponent.Builder builder() {
    return new Builder();
  }

  private Map<Class<?>, Provider<AndroidInjector.Factory<?>>>
      getMapOfClassOfAndProviderOfFactoryOf() {
    return MapBuilder.<Class<?>, Provider<AndroidInjector.Factory<?>>>newMapBuilder(2)
        .put(ListPostsActivity.class, (Provider) listPostsActivitySubcomponentBuilderProvider)
        .put(PostDetailActivity.class, (Provider) postDetailActivitySubcomponentBuilderProvider)
        .build();
  }

  private DispatchingAndroidInjector<Activity> getDispatchingAndroidInjectorOfActivity() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        getMapOfClassOfAndProviderOfFactoryOf(),
        Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap(),
        Collections
            .<Class<? extends Activity>, Provider<AndroidInjector.Factory<? extends Activity>>>
                emptyMap(),
        Collections.<String, Provider<AndroidInjector.Factory<? extends Activity>>>emptyMap());
  }

  private CommentsAdapterImpl getCommentsAdapterImpl() {
    return new CommentsAdapterImpl(
        DiffCallbackModule_ProvidesDiffCallbackModuleFactory.proxyProvidesDiffCallbackModule(
            diffCallbackModule));
  }

  private UserResource getUserResource() {
    return NetworkModule_CreateUserResourceFactory.proxyCreateUserResource(
        networkModule, createRetrofitProvider.get());
  }

  private UsersRepositoryImpl getUsersRepositoryImpl() {
    return new UsersRepositoryImpl(getUserResource());
  }

  private UsersUseCaseImpl getUsersUseCaseImpl() {
    return new UsersUseCaseImpl(getUsersRepositoryImpl(), new UsersDatastoreImpl());
  }

  private PostResource getPostResource() {
    return NetworkModule_CreatePostResourceFactory.proxyCreatePostResource(
        networkModule, createRetrofitProvider.get());
  }

  private PostsRepositoryImpl getPostsRepositoryImpl() {
    return new PostsRepositoryImpl(getPostResource());
  }

  private PostsUseCaseImpl getPostsUseCaseImpl() {
    return new PostsUseCaseImpl(getUsersUseCaseImpl(), getPostsRepositoryImpl());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.listPostsActivitySubcomponentBuilderProvider =
        new Provider<
            ActivityModule_ContributeListsPostsActivityInjector.ListPostsActivitySubcomponent
                .Builder>() {
          @Override
          public ActivityModule_ContributeListsPostsActivityInjector.ListPostsActivitySubcomponent
                  .Builder
              get() {
            return new ListPostsActivitySubcomponentBuilder();
          }
        };
    this.postDetailActivitySubcomponentBuilderProvider =
        new Provider<
            ActivityModule_ContributePostDetailActivityInjector.PostDetailActivitySubcomponent
                .Builder>() {
          @Override
          public ActivityModule_ContributePostDetailActivityInjector.PostDetailActivitySubcomponent
                  .Builder
              get() {
            return new PostDetailActivitySubcomponentBuilder();
          }
        };
    this.diffCallbackModule = builder.diffCallbackModule;
    this.networkModule = builder.networkModule;
    this.provideNetworkCacheInterceptorProvider =
        NetworkModule_ProvideNetworkCacheInterceptorFactory.create(builder.networkModule);
    this.provideHttpLoggingInterceptorProvider =
        NetworkModule_ProvideHttpLoggingInterceptorFactory.create(builder.networkModule);
    this.createOkHttpClientProvider =
        DoubleCheck.provider(
            NetworkModule_CreateOkHttpClientFactory.create(
                builder.networkModule,
                provideNetworkCacheInterceptorProvider,
                provideHttpLoggingInterceptorProvider));
    this.createRetrofitProvider =
        DoubleCheck.provider(
            NetworkModule_CreateRetrofitFactory.create(
                builder.networkModule, createOkHttpClientProvider));
  }

  @Override
  public void inject(MainApplication arg0) {
    injectMainApplication(arg0);
  }

  @Override
  public void inject(CommentsListView commentsListView) {
    injectCommentsListView(commentsListView);
  }

  private MainApplication injectMainApplication(MainApplication instance) {
    MainApplication_MembersInjector.injectDispatchingAndroidInjector(
        instance, getDispatchingAndroidInjectorOfActivity());
    return instance;
  }

  private CommentsListView injectCommentsListView(CommentsListView instance) {
    CommentsListView_MembersInjector.injectCommentsAdapter(instance, getCommentsAdapterImpl());
    return instance;
  }

  private static final class Builder implements MainAppComponent.Builder {
    private DiffCallbackModule diffCallbackModule;

    private NetworkModule networkModule;

    private Context context;

    @Override
    public MainAppComponent build() {
      if (diffCallbackModule == null) {
        this.diffCallbackModule = new DiffCallbackModule();
      }
      if (networkModule == null) {
        this.networkModule = new NetworkModule();
      }
      if (context == null) {
        throw new IllegalStateException(Context.class.getCanonicalName() + " must be set");
      }
      return new DaggerMainAppComponent(this);
    }

    @Override
    public Builder context(Context context) {
      this.context = Preconditions.checkNotNull(context);
      return this;
    }
  }

  private final class ListPostsActivitySubcomponentBuilder
      extends ActivityModule_ContributeListsPostsActivityInjector.ListPostsActivitySubcomponent
          .Builder {
    private PostsListModule postsListModule;

    private ListPostsActivity seedInstance;

    @Override
    public ActivityModule_ContributeListsPostsActivityInjector.ListPostsActivitySubcomponent
        build() {
      if (postsListModule == null) {
        this.postsListModule = new PostsListModule();
      }
      if (seedInstance == null) {
        throw new IllegalStateException(
            ListPostsActivity.class.getCanonicalName() + " must be set");
      }
      return new ListPostsActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(ListPostsActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class ListPostsActivitySubcomponentImpl
      implements ActivityModule_ContributeListsPostsActivityInjector.ListPostsActivitySubcomponent {
    private PostsListModule postsListModule;

    private ListPostsActivitySubcomponentImpl(ListPostsActivitySubcomponentBuilder builder) {
      initialize(builder);
    }

    private ListPostsViewModel.Factory getFactory() {
      return new ListPostsViewModel.Factory(
          DaggerMainAppComponent.this.getPostsUseCaseImpl(),
          NetworkModule_CreateHttpErrorUtilsFactory.proxyCreateHttpErrorUtils(
              DaggerMainAppComponent.this.networkModule));
    }

    private ListPostsAdapter getListPostsAdapter() {
      return PostsListModule_ProvidesListPostsAdapterImplFactory.proxyProvidesListPostsAdapterImpl(
          postsListModule,
          DiffCallbackModule_ProvidesDiffCallbackModuleFactory.proxyProvidesDiffCallbackModule(
              DaggerMainAppComponent.this.diffCallbackModule));
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ListPostsActivitySubcomponentBuilder builder) {
      this.postsListModule = builder.postsListModule;
    }

    @Override
    public void inject(ListPostsActivity arg0) {
      injectListPostsActivity(arg0);
    }

    private ListPostsActivity injectListPostsActivity(ListPostsActivity instance) {
      ListPostsActivity_MembersInjector.injectViewModelFactory(instance, getFactory());
      ListPostsActivity_MembersInjector.injectPostsAdapter(instance, getListPostsAdapter());
      return instance;
    }
  }

  private final class PostDetailActivitySubcomponentBuilder
      extends ActivityModule_ContributePostDetailActivityInjector.PostDetailActivitySubcomponent
          .Builder {
    private PostDetailActivity seedInstance;

    @Override
    public ActivityModule_ContributePostDetailActivityInjector.PostDetailActivitySubcomponent
        build() {
      if (seedInstance == null) {
        throw new IllegalStateException(
            PostDetailActivity.class.getCanonicalName() + " must be set");
      }
      return new PostDetailActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(PostDetailActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class PostDetailActivitySubcomponentImpl
      implements ActivityModule_ContributePostDetailActivityInjector
          .PostDetailActivitySubcomponent {
    private PostDetailActivitySubcomponentImpl(PostDetailActivitySubcomponentBuilder builder) {}

    private PostDetailViewModel.Factory getFactory() {
      return new PostDetailViewModel.Factory(
          DaggerMainAppComponent.this.getPostsUseCaseImpl(),
          NetworkModule_CreateHttpErrorUtilsFactory.proxyCreateHttpErrorUtils(
              DaggerMainAppComponent.this.networkModule));
    }

    @Override
    public void inject(PostDetailActivity arg0) {
      injectPostDetailActivity(arg0);
    }

    private PostDetailActivity injectPostDetailActivity(PostDetailActivity instance) {
      PostDetailActivity_MembersInjector.injectViewModelFactory(instance, getFactory());
      return instance;
    }
  }
}
