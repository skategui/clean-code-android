// Generated by Dagger (https://google.github.io/dagger).
package guillaume.agis.techtest.di;

import android.content.Context;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.Cache;

public final class NetworkModule_CreateCacheFactory implements Factory<Cache> {
  private final NetworkModule module;

  private final Provider<Context> contextProvider;

  public NetworkModule_CreateCacheFactory(NetworkModule module, Provider<Context> contextProvider) {
    this.module = module;
    this.contextProvider = contextProvider;
  }

  @Override
  public Cache get() {
    return provideInstance(module, contextProvider);
  }

  public static Cache provideInstance(NetworkModule module, Provider<Context> contextProvider) {
    return proxyCreateCache(module, contextProvider.get());
  }

  public static NetworkModule_CreateCacheFactory create(
      NetworkModule module, Provider<Context> contextProvider) {
    return new NetworkModule_CreateCacheFactory(module, contextProvider);
  }

  public static Cache proxyCreateCache(NetworkModule instance, Context context) {
    return Preconditions.checkNotNull(
        instance.createCache(context), "Cannot return null from a non-@Nullable @Provides method");
  }
}
