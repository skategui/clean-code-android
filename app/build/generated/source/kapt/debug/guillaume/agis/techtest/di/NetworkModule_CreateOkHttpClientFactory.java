// Generated by Dagger (https://google.github.io/dagger).
package guillaume.agis.techtest.di;

import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.Interceptor;
import okhttp3.OkHttpClient;
import okhttp3.logging.HttpLoggingInterceptor;

public final class NetworkModule_CreateOkHttpClientFactory implements Factory<OkHttpClient> {
  private final NetworkModule module;

  private final Provider<Interceptor> networkInterceptorProvider;

  private final Provider<HttpLoggingInterceptor> httpLoggingInterceptorProvider;

  public NetworkModule_CreateOkHttpClientFactory(
      NetworkModule module,
      Provider<Interceptor> networkInterceptorProvider,
      Provider<HttpLoggingInterceptor> httpLoggingInterceptorProvider) {
    this.module = module;
    this.networkInterceptorProvider = networkInterceptorProvider;
    this.httpLoggingInterceptorProvider = httpLoggingInterceptorProvider;
  }

  @Override
  public OkHttpClient get() {
    return provideInstance(module, networkInterceptorProvider, httpLoggingInterceptorProvider);
  }

  public static OkHttpClient provideInstance(
      NetworkModule module,
      Provider<Interceptor> networkInterceptorProvider,
      Provider<HttpLoggingInterceptor> httpLoggingInterceptorProvider) {
    return proxyCreateOkHttpClient(
        module, networkInterceptorProvider.get(), httpLoggingInterceptorProvider.get());
  }

  public static NetworkModule_CreateOkHttpClientFactory create(
      NetworkModule module,
      Provider<Interceptor> networkInterceptorProvider,
      Provider<HttpLoggingInterceptor> httpLoggingInterceptorProvider) {
    return new NetworkModule_CreateOkHttpClientFactory(
        module, networkInterceptorProvider, httpLoggingInterceptorProvider);
  }

  public static OkHttpClient proxyCreateOkHttpClient(
      NetworkModule instance,
      Interceptor networkInterceptor,
      HttpLoggingInterceptor httpLoggingInterceptor) {
    return Preconditions.checkNotNull(
        instance.createOkHttpClient(networkInterceptor, httpLoggingInterceptor),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
